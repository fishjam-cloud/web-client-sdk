// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.2
// source: fishjam/media_events/server/server.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Candidate, Metadata, MidToTrackId } from "../shared";

export const protobufPackage = "fishjam.media_events.server";

/** Defines any type of message sent from Membrane RTC Engine to Peer */
export interface MediaEvent {
  endpointUpdated?: MediaEvent_EndpointUpdated | undefined;
  trackUpdated?: MediaEvent_TrackUpdated | undefined;
  tracksAdded?: MediaEvent_TracksAdded | undefined;
  tracksRemoved?: MediaEvent_TracksRemoved | undefined;
  endpointAdded?: MediaEvent_EndpointAdded | undefined;
  endpointRemoved?: MediaEvent_EndpointRemoved | undefined;
  connected?: MediaEvent_Connected | undefined;
  error?: MediaEvent_Error | undefined;
  offerData?: MediaEvent_OfferData | undefined;
  candidate?: Candidate | undefined;
  sdpAnswer?: MediaEvent_SdpAnswer | undefined;
  vadNotification?: MediaEvent_VadNotification | undefined;
}

/** SCHEMAS */
export interface MediaEvent_Track {
  trackId: string;
  metadata: Metadata | undefined;
}

export interface MediaEvent_Endpoint {
  endpointId: string;
  endpointType: string;
  metadata: Metadata | undefined;
  tracks: MediaEvent_Track[];
}

/** Sent when metadata of one of the endpoints was updated */
export interface MediaEvent_EndpointUpdated {
  endpointId: string;
  metadata: Metadata | undefined;
}

/** Sent when metadata of one of the tracks was updated */
export interface MediaEvent_TrackUpdated {
  endpointId: string;
  trackId: string;
  metadata: Metadata | undefined;
}

/** Sent to informs that one of the peers has added one or more tracks. */
export interface MediaEvent_TracksAdded {
  endpointId: string;
  tracks: MediaEvent_Track[];
}

/** Sent to informs that one of the peers has removed one or more tracks. */
export interface MediaEvent_TracksRemoved {
  endpointId: string;
  trackIds: string[];
}

/** Sent to all peers in the room after a new endpoint was added. */
export interface MediaEvent_EndpointAdded {
  endpointId: string;
  metadata: Metadata | undefined;
}

/** Sent to the peer after connecting to the WebRTC Endpoint. */
export interface MediaEvent_Connected {
  endpointId: string;
  endpoints: MediaEvent_Endpoint[];
}

/** Sent to all remaining peers in the room after some endpoint was removed. */
export interface MediaEvent_EndpointRemoved {
  endpointId: string;
}

/** Sent to inform that an error occurred on the server providing a message to show */
export interface MediaEvent_Error {
  message: string;
}

/** Sent to inform about the number of audio and video tracks that will be sent from the engine to the peer */
export interface MediaEvent_OfferData {
  tracksTypes: MediaEvent_OfferData_TrackTypes | undefined;
}

export interface MediaEvent_OfferData_TrackTypes {
  audio: number;
  video: number;
}

/** Sent after receiving `SdpOffer` from Peer */
export interface MediaEvent_SdpAnswer {
  sdpAnswer: string;
  midToTrackId: MidToTrackId[];
}

/**
 * Sent to inform that the track denoted by `trackId` has changed their voice actiivty
 * For this notification to work, the server must be configured to use VAD extension
 * and the sender must support it.
 */
export interface MediaEvent_VadNotification {
  trackId: string;
  status: MediaEvent_VadNotification_Status;
}

export enum MediaEvent_VadNotification_Status {
  STATUS_UNSPECIFIED = 0,
  STATUS_SILENCE = 1,
  STATUS_SPEECH = 2,
  UNRECOGNIZED = -1,
}

export function mediaEvent_VadNotification_StatusFromJSON(object: any): MediaEvent_VadNotification_Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return MediaEvent_VadNotification_Status.STATUS_UNSPECIFIED;
    case 1:
    case "STATUS_SILENCE":
      return MediaEvent_VadNotification_Status.STATUS_SILENCE;
    case 2:
    case "STATUS_SPEECH":
      return MediaEvent_VadNotification_Status.STATUS_SPEECH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MediaEvent_VadNotification_Status.UNRECOGNIZED;
  }
}

export function mediaEvent_VadNotification_StatusToJSON(object: MediaEvent_VadNotification_Status): string {
  switch (object) {
    case MediaEvent_VadNotification_Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case MediaEvent_VadNotification_Status.STATUS_SILENCE:
      return "STATUS_SILENCE";
    case MediaEvent_VadNotification_Status.STATUS_SPEECH:
      return "STATUS_SPEECH";
    case MediaEvent_VadNotification_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

function createBaseMediaEvent(): MediaEvent {
  return {
    endpointUpdated: undefined,
    trackUpdated: undefined,
    tracksAdded: undefined,
    tracksRemoved: undefined,
    endpointAdded: undefined,
    endpointRemoved: undefined,
    connected: undefined,
    error: undefined,
    offerData: undefined,
    candidate: undefined,
    sdpAnswer: undefined,
    vadNotification: undefined,
  };
}

export const MediaEvent: MessageFns<MediaEvent> = {
  encode(message: MediaEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointUpdated !== undefined) {
      MediaEvent_EndpointUpdated.encode(message.endpointUpdated, writer.uint32(10).fork()).join();
    }
    if (message.trackUpdated !== undefined) {
      MediaEvent_TrackUpdated.encode(message.trackUpdated, writer.uint32(18).fork()).join();
    }
    if (message.tracksAdded !== undefined) {
      MediaEvent_TracksAdded.encode(message.tracksAdded, writer.uint32(26).fork()).join();
    }
    if (message.tracksRemoved !== undefined) {
      MediaEvent_TracksRemoved.encode(message.tracksRemoved, writer.uint32(34).fork()).join();
    }
    if (message.endpointAdded !== undefined) {
      MediaEvent_EndpointAdded.encode(message.endpointAdded, writer.uint32(42).fork()).join();
    }
    if (message.endpointRemoved !== undefined) {
      MediaEvent_EndpointRemoved.encode(message.endpointRemoved, writer.uint32(50).fork()).join();
    }
    if (message.connected !== undefined) {
      MediaEvent_Connected.encode(message.connected, writer.uint32(58).fork()).join();
    }
    if (message.error !== undefined) {
      MediaEvent_Error.encode(message.error, writer.uint32(66).fork()).join();
    }
    if (message.offerData !== undefined) {
      MediaEvent_OfferData.encode(message.offerData, writer.uint32(74).fork()).join();
    }
    if (message.candidate !== undefined) {
      Candidate.encode(message.candidate, writer.uint32(82).fork()).join();
    }
    if (message.sdpAnswer !== undefined) {
      MediaEvent_SdpAnswer.encode(message.sdpAnswer, writer.uint32(90).fork()).join();
    }
    if (message.vadNotification !== undefined) {
      MediaEvent_VadNotification.encode(message.vadNotification, writer.uint32(98).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointUpdated = MediaEvent_EndpointUpdated.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackUpdated = MediaEvent_TrackUpdated.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tracksAdded = MediaEvent_TracksAdded.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tracksRemoved = MediaEvent_TracksRemoved.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.endpointAdded = MediaEvent_EndpointAdded.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.endpointRemoved = MediaEvent_EndpointRemoved.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.connected = MediaEvent_Connected.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.error = MediaEvent_Error.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.offerData = MediaEvent_OfferData.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.candidate = Candidate.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.sdpAnswer = MediaEvent_SdpAnswer.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.vadNotification = MediaEvent_VadNotification.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent {
    return {
      endpointUpdated: isSet(object.endpointUpdated)
        ? MediaEvent_EndpointUpdated.fromJSON(object.endpointUpdated)
        : undefined,
      trackUpdated: isSet(object.trackUpdated) ? MediaEvent_TrackUpdated.fromJSON(object.trackUpdated) : undefined,
      tracksAdded: isSet(object.tracksAdded) ? MediaEvent_TracksAdded.fromJSON(object.tracksAdded) : undefined,
      tracksRemoved: isSet(object.tracksRemoved) ? MediaEvent_TracksRemoved.fromJSON(object.tracksRemoved) : undefined,
      endpointAdded: isSet(object.endpointAdded) ? MediaEvent_EndpointAdded.fromJSON(object.endpointAdded) : undefined,
      endpointRemoved: isSet(object.endpointRemoved)
        ? MediaEvent_EndpointRemoved.fromJSON(object.endpointRemoved)
        : undefined,
      connected: isSet(object.connected) ? MediaEvent_Connected.fromJSON(object.connected) : undefined,
      error: isSet(object.error) ? MediaEvent_Error.fromJSON(object.error) : undefined,
      offerData: isSet(object.offerData) ? MediaEvent_OfferData.fromJSON(object.offerData) : undefined,
      candidate: isSet(object.candidate) ? Candidate.fromJSON(object.candidate) : undefined,
      sdpAnswer: isSet(object.sdpAnswer) ? MediaEvent_SdpAnswer.fromJSON(object.sdpAnswer) : undefined,
      vadNotification: isSet(object.vadNotification)
        ? MediaEvent_VadNotification.fromJSON(object.vadNotification)
        : undefined,
    };
  },

  toJSON(message: MediaEvent): unknown {
    const obj: any = {};
    if (message.endpointUpdated !== undefined) {
      obj.endpointUpdated = MediaEvent_EndpointUpdated.toJSON(message.endpointUpdated);
    }
    if (message.trackUpdated !== undefined) {
      obj.trackUpdated = MediaEvent_TrackUpdated.toJSON(message.trackUpdated);
    }
    if (message.tracksAdded !== undefined) {
      obj.tracksAdded = MediaEvent_TracksAdded.toJSON(message.tracksAdded);
    }
    if (message.tracksRemoved !== undefined) {
      obj.tracksRemoved = MediaEvent_TracksRemoved.toJSON(message.tracksRemoved);
    }
    if (message.endpointAdded !== undefined) {
      obj.endpointAdded = MediaEvent_EndpointAdded.toJSON(message.endpointAdded);
    }
    if (message.endpointRemoved !== undefined) {
      obj.endpointRemoved = MediaEvent_EndpointRemoved.toJSON(message.endpointRemoved);
    }
    if (message.connected !== undefined) {
      obj.connected = MediaEvent_Connected.toJSON(message.connected);
    }
    if (message.error !== undefined) {
      obj.error = MediaEvent_Error.toJSON(message.error);
    }
    if (message.offerData !== undefined) {
      obj.offerData = MediaEvent_OfferData.toJSON(message.offerData);
    }
    if (message.candidate !== undefined) {
      obj.candidate = Candidate.toJSON(message.candidate);
    }
    if (message.sdpAnswer !== undefined) {
      obj.sdpAnswer = MediaEvent_SdpAnswer.toJSON(message.sdpAnswer);
    }
    if (message.vadNotification !== undefined) {
      obj.vadNotification = MediaEvent_VadNotification.toJSON(message.vadNotification);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent>, I>>(base?: I): MediaEvent {
    return MediaEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent>, I>>(object: I): MediaEvent {
    const message = createBaseMediaEvent();
    message.endpointUpdated = (object.endpointUpdated !== undefined && object.endpointUpdated !== null)
      ? MediaEvent_EndpointUpdated.fromPartial(object.endpointUpdated)
      : undefined;
    message.trackUpdated = (object.trackUpdated !== undefined && object.trackUpdated !== null)
      ? MediaEvent_TrackUpdated.fromPartial(object.trackUpdated)
      : undefined;
    message.tracksAdded = (object.tracksAdded !== undefined && object.tracksAdded !== null)
      ? MediaEvent_TracksAdded.fromPartial(object.tracksAdded)
      : undefined;
    message.tracksRemoved = (object.tracksRemoved !== undefined && object.tracksRemoved !== null)
      ? MediaEvent_TracksRemoved.fromPartial(object.tracksRemoved)
      : undefined;
    message.endpointAdded = (object.endpointAdded !== undefined && object.endpointAdded !== null)
      ? MediaEvent_EndpointAdded.fromPartial(object.endpointAdded)
      : undefined;
    message.endpointRemoved = (object.endpointRemoved !== undefined && object.endpointRemoved !== null)
      ? MediaEvent_EndpointRemoved.fromPartial(object.endpointRemoved)
      : undefined;
    message.connected = (object.connected !== undefined && object.connected !== null)
      ? MediaEvent_Connected.fromPartial(object.connected)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? MediaEvent_Error.fromPartial(object.error)
      : undefined;
    message.offerData = (object.offerData !== undefined && object.offerData !== null)
      ? MediaEvent_OfferData.fromPartial(object.offerData)
      : undefined;
    message.candidate = (object.candidate !== undefined && object.candidate !== null)
      ? Candidate.fromPartial(object.candidate)
      : undefined;
    message.sdpAnswer = (object.sdpAnswer !== undefined && object.sdpAnswer !== null)
      ? MediaEvent_SdpAnswer.fromPartial(object.sdpAnswer)
      : undefined;
    message.vadNotification = (object.vadNotification !== undefined && object.vadNotification !== null)
      ? MediaEvent_VadNotification.fromPartial(object.vadNotification)
      : undefined;
    return message;
  },
};

function createBaseMediaEvent_Track(): MediaEvent_Track {
  return { trackId: "", metadata: undefined };
}

export const MediaEvent_Track: MessageFns<MediaEvent_Track> = {
  encode(message: MediaEvent_Track, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackId !== "") {
      writer.uint32(10).string(message.trackId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_Track {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_Track();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_Track {
    return {
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: MediaEvent_Track): unknown {
    const obj: any = {};
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_Track>, I>>(base?: I): MediaEvent_Track {
    return MediaEvent_Track.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_Track>, I>>(object: I): MediaEvent_Track {
    const message = createBaseMediaEvent_Track();
    message.trackId = object.trackId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseMediaEvent_Endpoint(): MediaEvent_Endpoint {
  return { endpointId: "", endpointType: "", metadata: undefined, tracks: [] };
}

export const MediaEvent_Endpoint: MessageFns<MediaEvent_Endpoint> = {
  encode(message: MediaEvent_Endpoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    if (message.endpointType !== "") {
      writer.uint32(18).string(message.endpointType);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    for (const v of message.tracks) {
      MediaEvent_Track.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_Endpoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_Endpoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endpointType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tracks.push(MediaEvent_Track.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_Endpoint {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      endpointType: isSet(object.endpointType) ? globalThis.String(object.endpointType) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      tracks: globalThis.Array.isArray(object?.tracks)
        ? object.tracks.map((e: any) => MediaEvent_Track.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MediaEvent_Endpoint): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.endpointType !== "") {
      obj.endpointType = message.endpointType;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.tracks?.length) {
      obj.tracks = message.tracks.map((e) => MediaEvent_Track.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_Endpoint>, I>>(base?: I): MediaEvent_Endpoint {
    return MediaEvent_Endpoint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_Endpoint>, I>>(object: I): MediaEvent_Endpoint {
    const message = createBaseMediaEvent_Endpoint();
    message.endpointId = object.endpointId ?? "";
    message.endpointType = object.endpointType ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.tracks = object.tracks?.map((e) => MediaEvent_Track.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMediaEvent_EndpointUpdated(): MediaEvent_EndpointUpdated {
  return { endpointId: "", metadata: undefined };
}

export const MediaEvent_EndpointUpdated: MessageFns<MediaEvent_EndpointUpdated> = {
  encode(message: MediaEvent_EndpointUpdated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_EndpointUpdated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_EndpointUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_EndpointUpdated {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: MediaEvent_EndpointUpdated): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_EndpointUpdated>, I>>(base?: I): MediaEvent_EndpointUpdated {
    return MediaEvent_EndpointUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_EndpointUpdated>, I>>(object: I): MediaEvent_EndpointUpdated {
    const message = createBaseMediaEvent_EndpointUpdated();
    message.endpointId = object.endpointId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseMediaEvent_TrackUpdated(): MediaEvent_TrackUpdated {
  return { endpointId: "", trackId: "", metadata: undefined };
}

export const MediaEvent_TrackUpdated: MessageFns<MediaEvent_TrackUpdated> = {
  encode(message: MediaEvent_TrackUpdated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    if (message.trackId !== "") {
      writer.uint32(18).string(message.trackId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_TrackUpdated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_TrackUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_TrackUpdated {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: MediaEvent_TrackUpdated): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_TrackUpdated>, I>>(base?: I): MediaEvent_TrackUpdated {
    return MediaEvent_TrackUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_TrackUpdated>, I>>(object: I): MediaEvent_TrackUpdated {
    const message = createBaseMediaEvent_TrackUpdated();
    message.endpointId = object.endpointId ?? "";
    message.trackId = object.trackId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseMediaEvent_TracksAdded(): MediaEvent_TracksAdded {
  return { endpointId: "", tracks: [] };
}

export const MediaEvent_TracksAdded: MessageFns<MediaEvent_TracksAdded> = {
  encode(message: MediaEvent_TracksAdded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    for (const v of message.tracks) {
      MediaEvent_Track.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_TracksAdded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_TracksAdded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tracks.push(MediaEvent_Track.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_TracksAdded {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      tracks: globalThis.Array.isArray(object?.tracks)
        ? object.tracks.map((e: any) => MediaEvent_Track.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MediaEvent_TracksAdded): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.tracks?.length) {
      obj.tracks = message.tracks.map((e) => MediaEvent_Track.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_TracksAdded>, I>>(base?: I): MediaEvent_TracksAdded {
    return MediaEvent_TracksAdded.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_TracksAdded>, I>>(object: I): MediaEvent_TracksAdded {
    const message = createBaseMediaEvent_TracksAdded();
    message.endpointId = object.endpointId ?? "";
    message.tracks = object.tracks?.map((e) => MediaEvent_Track.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMediaEvent_TracksRemoved(): MediaEvent_TracksRemoved {
  return { endpointId: "", trackIds: [] };
}

export const MediaEvent_TracksRemoved: MessageFns<MediaEvent_TracksRemoved> = {
  encode(message: MediaEvent_TracksRemoved, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    for (const v of message.trackIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_TracksRemoved {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_TracksRemoved();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_TracksRemoved {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      trackIds: globalThis.Array.isArray(object?.trackIds) ? object.trackIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: MediaEvent_TracksRemoved): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.trackIds?.length) {
      obj.trackIds = message.trackIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_TracksRemoved>, I>>(base?: I): MediaEvent_TracksRemoved {
    return MediaEvent_TracksRemoved.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_TracksRemoved>, I>>(object: I): MediaEvent_TracksRemoved {
    const message = createBaseMediaEvent_TracksRemoved();
    message.endpointId = object.endpointId ?? "";
    message.trackIds = object.trackIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseMediaEvent_EndpointAdded(): MediaEvent_EndpointAdded {
  return { endpointId: "", metadata: undefined };
}

export const MediaEvent_EndpointAdded: MessageFns<MediaEvent_EndpointAdded> = {
  encode(message: MediaEvent_EndpointAdded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_EndpointAdded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_EndpointAdded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_EndpointAdded {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
    };
  },

  toJSON(message: MediaEvent_EndpointAdded): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_EndpointAdded>, I>>(base?: I): MediaEvent_EndpointAdded {
    return MediaEvent_EndpointAdded.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_EndpointAdded>, I>>(object: I): MediaEvent_EndpointAdded {
    const message = createBaseMediaEvent_EndpointAdded();
    message.endpointId = object.endpointId ?? "";
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    return message;
  },
};

function createBaseMediaEvent_Connected(): MediaEvent_Connected {
  return { endpointId: "", endpoints: [] };
}

export const MediaEvent_Connected: MessageFns<MediaEvent_Connected> = {
  encode(message: MediaEvent_Connected, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    for (const v of message.endpoints) {
      MediaEvent_Endpoint.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_Connected {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_Connected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endpoints.push(MediaEvent_Endpoint.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_Connected {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      endpoints: globalThis.Array.isArray(object?.endpoints)
        ? object.endpoints.map((e: any) => MediaEvent_Endpoint.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MediaEvent_Connected): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.endpoints?.length) {
      obj.endpoints = message.endpoints.map((e) => MediaEvent_Endpoint.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_Connected>, I>>(base?: I): MediaEvent_Connected {
    return MediaEvent_Connected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_Connected>, I>>(object: I): MediaEvent_Connected {
    const message = createBaseMediaEvent_Connected();
    message.endpointId = object.endpointId ?? "";
    message.endpoints = object.endpoints?.map((e) => MediaEvent_Endpoint.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMediaEvent_EndpointRemoved(): MediaEvent_EndpointRemoved {
  return { endpointId: "" };
}

export const MediaEvent_EndpointRemoved: MessageFns<MediaEvent_EndpointRemoved> = {
  encode(message: MediaEvent_EndpointRemoved, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_EndpointRemoved {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_EndpointRemoved();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_EndpointRemoved {
    return { endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "" };
  },

  toJSON(message: MediaEvent_EndpointRemoved): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_EndpointRemoved>, I>>(base?: I): MediaEvent_EndpointRemoved {
    return MediaEvent_EndpointRemoved.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_EndpointRemoved>, I>>(object: I): MediaEvent_EndpointRemoved {
    const message = createBaseMediaEvent_EndpointRemoved();
    message.endpointId = object.endpointId ?? "";
    return message;
  },
};

function createBaseMediaEvent_Error(): MediaEvent_Error {
  return { message: "" };
}

export const MediaEvent_Error: MessageFns<MediaEvent_Error> = {
  encode(message: MediaEvent_Error, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_Error {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_Error();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_Error {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: MediaEvent_Error): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_Error>, I>>(base?: I): MediaEvent_Error {
    return MediaEvent_Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_Error>, I>>(object: I): MediaEvent_Error {
    const message = createBaseMediaEvent_Error();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseMediaEvent_OfferData(): MediaEvent_OfferData {
  return { tracksTypes: undefined };
}

export const MediaEvent_OfferData: MessageFns<MediaEvent_OfferData> = {
  encode(message: MediaEvent_OfferData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tracksTypes !== undefined) {
      MediaEvent_OfferData_TrackTypes.encode(message.tracksTypes, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_OfferData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_OfferData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tracksTypes = MediaEvent_OfferData_TrackTypes.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_OfferData {
    return {
      tracksTypes: isSet(object.tracksTypes) ? MediaEvent_OfferData_TrackTypes.fromJSON(object.tracksTypes) : undefined,
    };
  },

  toJSON(message: MediaEvent_OfferData): unknown {
    const obj: any = {};
    if (message.tracksTypes !== undefined) {
      obj.tracksTypes = MediaEvent_OfferData_TrackTypes.toJSON(message.tracksTypes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_OfferData>, I>>(base?: I): MediaEvent_OfferData {
    return MediaEvent_OfferData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_OfferData>, I>>(object: I): MediaEvent_OfferData {
    const message = createBaseMediaEvent_OfferData();
    message.tracksTypes = (object.tracksTypes !== undefined && object.tracksTypes !== null)
      ? MediaEvent_OfferData_TrackTypes.fromPartial(object.tracksTypes)
      : undefined;
    return message;
  },
};

function createBaseMediaEvent_OfferData_TrackTypes(): MediaEvent_OfferData_TrackTypes {
  return { audio: 0, video: 0 };
}

export const MediaEvent_OfferData_TrackTypes: MessageFns<MediaEvent_OfferData_TrackTypes> = {
  encode(message: MediaEvent_OfferData_TrackTypes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.audio !== 0) {
      writer.uint32(8).int32(message.audio);
    }
    if (message.video !== 0) {
      writer.uint32(16).int32(message.video);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_OfferData_TrackTypes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_OfferData_TrackTypes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.audio = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.video = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_OfferData_TrackTypes {
    return {
      audio: isSet(object.audio) ? globalThis.Number(object.audio) : 0,
      video: isSet(object.video) ? globalThis.Number(object.video) : 0,
    };
  },

  toJSON(message: MediaEvent_OfferData_TrackTypes): unknown {
    const obj: any = {};
    if (message.audio !== 0) {
      obj.audio = Math.round(message.audio);
    }
    if (message.video !== 0) {
      obj.video = Math.round(message.video);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_OfferData_TrackTypes>, I>>(base?: I): MediaEvent_OfferData_TrackTypes {
    return MediaEvent_OfferData_TrackTypes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_OfferData_TrackTypes>, I>>(
    object: I,
  ): MediaEvent_OfferData_TrackTypes {
    const message = createBaseMediaEvent_OfferData_TrackTypes();
    message.audio = object.audio ?? 0;
    message.video = object.video ?? 0;
    return message;
  },
};

function createBaseMediaEvent_SdpAnswer(): MediaEvent_SdpAnswer {
  return { sdpAnswer: "", midToTrackId: [] };
}

export const MediaEvent_SdpAnswer: MessageFns<MediaEvent_SdpAnswer> = {
  encode(message: MediaEvent_SdpAnswer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sdpAnswer !== "") {
      writer.uint32(10).string(message.sdpAnswer);
    }
    for (const v of message.midToTrackId) {
      MidToTrackId.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_SdpAnswer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_SdpAnswer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sdpAnswer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.midToTrackId.push(MidToTrackId.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_SdpAnswer {
    return {
      sdpAnswer: isSet(object.sdpAnswer) ? globalThis.String(object.sdpAnswer) : "",
      midToTrackId: globalThis.Array.isArray(object?.midToTrackId)
        ? object.midToTrackId.map((e: any) => MidToTrackId.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MediaEvent_SdpAnswer): unknown {
    const obj: any = {};
    if (message.sdpAnswer !== "") {
      obj.sdpAnswer = message.sdpAnswer;
    }
    if (message.midToTrackId?.length) {
      obj.midToTrackId = message.midToTrackId.map((e) => MidToTrackId.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_SdpAnswer>, I>>(base?: I): MediaEvent_SdpAnswer {
    return MediaEvent_SdpAnswer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_SdpAnswer>, I>>(object: I): MediaEvent_SdpAnswer {
    const message = createBaseMediaEvent_SdpAnswer();
    message.sdpAnswer = object.sdpAnswer ?? "";
    message.midToTrackId = object.midToTrackId?.map((e) => MidToTrackId.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMediaEvent_VadNotification(): MediaEvent_VadNotification {
  return { trackId: "", status: 0 };
}

export const MediaEvent_VadNotification: MessageFns<MediaEvent_VadNotification> = {
  encode(message: MediaEvent_VadNotification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackId !== "") {
      writer.uint32(10).string(message.trackId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_VadNotification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_VadNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_VadNotification {
    return {
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      status: isSet(object.status) ? mediaEvent_VadNotification_StatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: MediaEvent_VadNotification): unknown {
    const obj: any = {};
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.status !== 0) {
      obj.status = mediaEvent_VadNotification_StatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_VadNotification>, I>>(base?: I): MediaEvent_VadNotification {
    return MediaEvent_VadNotification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_VadNotification>, I>>(object: I): MediaEvent_VadNotification {
    const message = createBaseMediaEvent_VadNotification();
    message.trackId = object.trackId ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
