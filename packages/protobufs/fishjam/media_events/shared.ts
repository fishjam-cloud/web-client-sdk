// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.31.1
// source: fishjam/media_events/shared.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "fishjam.media_events";

export enum Variant {
  VARIANT_UNSPECIFIED = 0,
  VARIANT_LOW = 1,
  VARIANT_MEDIUM = 2,
  VARIANT_HIGH = 3,
  UNRECOGNIZED = -1,
}

export function variantFromJSON(object: any): Variant {
  switch (object) {
    case 0:
    case "VARIANT_UNSPECIFIED":
      return Variant.VARIANT_UNSPECIFIED;
    case 1:
    case "VARIANT_LOW":
      return Variant.VARIANT_LOW;
    case 2:
    case "VARIANT_MEDIUM":
      return Variant.VARIANT_MEDIUM;
    case 3:
    case "VARIANT_HIGH":
      return Variant.VARIANT_HIGH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Variant.UNRECOGNIZED;
  }
}

export function variantToJSON(object: Variant): string {
  switch (object) {
    case Variant.VARIANT_UNSPECIFIED:
      return "VARIANT_UNSPECIFIED";
    case Variant.VARIANT_LOW:
      return "VARIANT_LOW";
    case Variant.VARIANT_MEDIUM:
      return "VARIANT_MEDIUM";
    case Variant.VARIANT_HIGH:
      return "VARIANT_HIGH";
    case Variant.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Contains information about an ICE candidate which will be sent to the peer/server */
export interface Candidate {
  candidate: string;
  sdpMLineIndex: number;
  sdpMid: string;
  usernameFragment: string;
}

function createBaseCandidate(): Candidate {
  return { candidate: "", sdpMLineIndex: 0, sdpMid: "", usernameFragment: "" };
}

export const Candidate: MessageFns<Candidate> = {
  encode(message: Candidate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.candidate !== "") {
      writer.uint32(10).string(message.candidate);
    }
    if (message.sdpMLineIndex !== 0) {
      writer.uint32(16).int32(message.sdpMLineIndex);
    }
    if (message.sdpMid !== "") {
      writer.uint32(26).string(message.sdpMid);
    }
    if (message.usernameFragment !== "") {
      writer.uint32(34).string(message.usernameFragment);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Candidate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCandidate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.candidate = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sdpMLineIndex = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sdpMid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.usernameFragment = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Candidate {
    return {
      candidate: isSet(object.candidate) ? globalThis.String(object.candidate) : "",
      sdpMLineIndex: isSet(object.sdpMLineIndex) ? globalThis.Number(object.sdpMLineIndex) : 0,
      sdpMid: isSet(object.sdpMid) ? globalThis.String(object.sdpMid) : "",
      usernameFragment: isSet(object.usernameFragment) ? globalThis.String(object.usernameFragment) : "",
    };
  },

  toJSON(message: Candidate): unknown {
    const obj: any = {};
    if (message.candidate !== "") {
      obj.candidate = message.candidate;
    }
    if (message.sdpMLineIndex !== 0) {
      obj.sdpMLineIndex = Math.round(message.sdpMLineIndex);
    }
    if (message.sdpMid !== "") {
      obj.sdpMid = message.sdpMid;
    }
    if (message.usernameFragment !== "") {
      obj.usernameFragment = message.usernameFragment;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Candidate>, I>>(base?: I): Candidate {
    return Candidate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Candidate>, I>>(object: I): Candidate {
    const message = createBaseCandidate();
    message.candidate = object.candidate ?? "";
    message.sdpMLineIndex = object.sdpMLineIndex ?? 0;
    message.sdpMid = object.sdpMid ?? "";
    message.usernameFragment = object.usernameFragment ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
