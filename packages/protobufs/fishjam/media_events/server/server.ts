// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.4.0
//   protoc               v5.28.2
// source: fishjam/media_events/server/server.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Candidate, Variant, variantFromJSON, variantToJSON } from "../shared";

export const protobufPackage = "fishjam.media_events.server";

/** Defines any type of message sent from Membrane RTC Engine to Peer */
export interface MediaEvent {
  endpointUpdated?: MediaEvent_EndpointUpdated | undefined;
  trackUpdated?: MediaEvent_TrackUpdated | undefined;
  tracksAdded?: MediaEvent_TracksAdded | undefined;
  tracksRemoved?: MediaEvent_TracksRemoved | undefined;
  endpointAdded?: MediaEvent_EndpointAdded | undefined;
  endpointRemoved?: MediaEvent_EndpointRemoved | undefined;
  connected?: MediaEvent_Connected | undefined;
  error?: MediaEvent_Error | undefined;
  offerData?: MediaEvent_OfferData | undefined;
  candidate?: Candidate | undefined;
  sdpAnswer?: MediaEvent_SdpAnswer | undefined;
  vadNotification?: MediaEvent_VadNotification | undefined;
  trackVariantSwitched?: MediaEvent_TrackVariantSwitched | undefined;
  trackVariantDisabled?: MediaEvent_TrackVariantDisabled | undefined;
  trackVariantEnabled?: MediaEvent_TrackVariantEnabled | undefined;
}

/** SCHEMAS */
export interface MediaEvent_Track {
  metadataJson: string;
  simulcastConfig: MediaEvent_Track_SimulcastConfig | undefined;
}

export interface MediaEvent_Track_SimulcastConfig {
  enabled: boolean;
  enabledVariants: Variant[];
  disabledVariants: Variant[];
}

export interface MediaEvent_Endpoint {
  endpointType: string;
  metadataJson: string;
  trackIdToTrack: { [key: string]: MediaEvent_Track };
}

export interface MediaEvent_Endpoint_TrackIdToTrackEntry {
  key: string;
  value: MediaEvent_Track | undefined;
}

export interface MediaEvent_IceServer {
  credential: string;
  urls: string[];
  username: string;
}

/** Sent when metadata of one of the endpoints was updated */
export interface MediaEvent_EndpointUpdated {
  endpointId: string;
  metadataJson: string;
}

/** Sent when metadata of one of the tracks was updated */
export interface MediaEvent_TrackUpdated {
  endpointId: string;
  trackId: string;
  metadataJson: string;
}

/** Sent to informs that one of the peers has added one or more tracks. */
export interface MediaEvent_TracksAdded {
  endpointId: string;
  trackIdToTrack: { [key: string]: MediaEvent_Track };
}

export interface MediaEvent_TracksAdded_TrackIdToTrackEntry {
  key: string;
  value: MediaEvent_Track | undefined;
}

/** Sent to informs that one of the peers has removed one or more tracks. */
export interface MediaEvent_TracksRemoved {
  endpointId: string;
  trackIds: string[];
}

/** Sent to all peers in the room after a new endpoint was added. */
export interface MediaEvent_EndpointAdded {
  endpointId: string;
  metadataJson: string;
}

/** Sent to the peer after connecting to the WebRTC Endpoint. */
export interface MediaEvent_Connected {
  endpointId: string;
  endpointIdToEndpoint: { [key: string]: MediaEvent_Endpoint };
  iceServers: MediaEvent_IceServer[];
}

export interface MediaEvent_Connected_EndpointIdToEndpointEntry {
  key: string;
  value: MediaEvent_Endpoint | undefined;
}

/** Sent to all remaining peers in the room after some endpoint was removed. */
export interface MediaEvent_EndpointRemoved {
  endpointId: string;
}

/** Sent to inform that an error occurred on the server providing a message to show */
export interface MediaEvent_Error {
  message: string;
}

/** Sent to inform about the number of audio and video tracks that will be sent from the engine to the peer */
export interface MediaEvent_OfferData {
  tracksTypes: MediaEvent_OfferData_TrackTypes | undefined;
}

export interface MediaEvent_OfferData_TrackTypes {
  audio: number;
  video: number;
}

/** Sent after receiving `SdpOffer` from Peer */
export interface MediaEvent_SdpAnswer {
  /** The value of the `sessionDescription.sdp` */
  sdp: string;
  midToTrackId: { [key: string]: string };
}

export interface MediaEvent_SdpAnswer_MidToTrackIdEntry {
  key: string;
  value: string;
}

/**
 * Sent to inform that the track denoted by `trackId` has changed their voice actiivty
 * For this notification to work, the server must be configured to use VAD extension
 * and the sender must support it.
 */
export interface MediaEvent_VadNotification {
  trackId: string;
  status: MediaEvent_VadNotification_Status;
}

export enum MediaEvent_VadNotification_Status {
  STATUS_UNSPECIFIED = 0,
  STATUS_SILENCE = 1,
  STATUS_SPEECH = 2,
  UNRECOGNIZED = -1,
}

export function mediaEvent_VadNotification_StatusFromJSON(object: any): MediaEvent_VadNotification_Status {
  switch (object) {
    case 0:
    case "STATUS_UNSPECIFIED":
      return MediaEvent_VadNotification_Status.STATUS_UNSPECIFIED;
    case 1:
    case "STATUS_SILENCE":
      return MediaEvent_VadNotification_Status.STATUS_SILENCE;
    case 2:
    case "STATUS_SPEECH":
      return MediaEvent_VadNotification_Status.STATUS_SPEECH;
    case -1:
    case "UNRECOGNIZED":
    default:
      return MediaEvent_VadNotification_Status.UNRECOGNIZED;
  }
}

export function mediaEvent_VadNotification_StatusToJSON(object: MediaEvent_VadNotification_Status): string {
  switch (object) {
    case MediaEvent_VadNotification_Status.STATUS_UNSPECIFIED:
      return "STATUS_UNSPECIFIED";
    case MediaEvent_VadNotification_Status.STATUS_SILENCE:
      return "STATUS_SILENCE";
    case MediaEvent_VadNotification_Status.STATUS_SPEECH:
      return "STATUS_SPEECH";
    case MediaEvent_VadNotification_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Informs that track's variant has been changed */
export interface MediaEvent_TrackVariantSwitched {
  endpointId: string;
  trackId: string;
  variant: Variant;
}

/** Sent when track's variant has been disabled */
export interface MediaEvent_TrackVariantDisabled {
  endpointId: string;
  trackId: string;
  variant: Variant;
}

/** Sent when track's variant has been enabled */
export interface MediaEvent_TrackVariantEnabled {
  endpointId: string;
  trackId: string;
  variant: Variant;
}

function createBaseMediaEvent(): MediaEvent {
  return {
    endpointUpdated: undefined,
    trackUpdated: undefined,
    tracksAdded: undefined,
    tracksRemoved: undefined,
    endpointAdded: undefined,
    endpointRemoved: undefined,
    connected: undefined,
    error: undefined,
    offerData: undefined,
    candidate: undefined,
    sdpAnswer: undefined,
    vadNotification: undefined,
    trackVariantSwitched: undefined,
    trackVariantDisabled: undefined,
    trackVariantEnabled: undefined,
  };
}

export const MediaEvent: MessageFns<MediaEvent> = {
  encode(message: MediaEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointUpdated !== undefined) {
      MediaEvent_EndpointUpdated.encode(message.endpointUpdated, writer.uint32(10).fork()).join();
    }
    if (message.trackUpdated !== undefined) {
      MediaEvent_TrackUpdated.encode(message.trackUpdated, writer.uint32(18).fork()).join();
    }
    if (message.tracksAdded !== undefined) {
      MediaEvent_TracksAdded.encode(message.tracksAdded, writer.uint32(26).fork()).join();
    }
    if (message.tracksRemoved !== undefined) {
      MediaEvent_TracksRemoved.encode(message.tracksRemoved, writer.uint32(34).fork()).join();
    }
    if (message.endpointAdded !== undefined) {
      MediaEvent_EndpointAdded.encode(message.endpointAdded, writer.uint32(42).fork()).join();
    }
    if (message.endpointRemoved !== undefined) {
      MediaEvent_EndpointRemoved.encode(message.endpointRemoved, writer.uint32(50).fork()).join();
    }
    if (message.connected !== undefined) {
      MediaEvent_Connected.encode(message.connected, writer.uint32(58).fork()).join();
    }
    if (message.error !== undefined) {
      MediaEvent_Error.encode(message.error, writer.uint32(66).fork()).join();
    }
    if (message.offerData !== undefined) {
      MediaEvent_OfferData.encode(message.offerData, writer.uint32(74).fork()).join();
    }
    if (message.candidate !== undefined) {
      Candidate.encode(message.candidate, writer.uint32(82).fork()).join();
    }
    if (message.sdpAnswer !== undefined) {
      MediaEvent_SdpAnswer.encode(message.sdpAnswer, writer.uint32(90).fork()).join();
    }
    if (message.vadNotification !== undefined) {
      MediaEvent_VadNotification.encode(message.vadNotification, writer.uint32(98).fork()).join();
    }
    if (message.trackVariantSwitched !== undefined) {
      MediaEvent_TrackVariantSwitched.encode(message.trackVariantSwitched, writer.uint32(106).fork()).join();
    }
    if (message.trackVariantDisabled !== undefined) {
      MediaEvent_TrackVariantDisabled.encode(message.trackVariantDisabled, writer.uint32(114).fork()).join();
    }
    if (message.trackVariantEnabled !== undefined) {
      MediaEvent_TrackVariantEnabled.encode(message.trackVariantEnabled, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointUpdated = MediaEvent_EndpointUpdated.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackUpdated = MediaEvent_TrackUpdated.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.tracksAdded = MediaEvent_TracksAdded.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tracksRemoved = MediaEvent_TracksRemoved.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.endpointAdded = MediaEvent_EndpointAdded.decode(reader, reader.uint32());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.endpointRemoved = MediaEvent_EndpointRemoved.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.connected = MediaEvent_Connected.decode(reader, reader.uint32());
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.error = MediaEvent_Error.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.offerData = MediaEvent_OfferData.decode(reader, reader.uint32());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.candidate = Candidate.decode(reader, reader.uint32());
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.sdpAnswer = MediaEvent_SdpAnswer.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.vadNotification = MediaEvent_VadNotification.decode(reader, reader.uint32());
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.trackVariantSwitched = MediaEvent_TrackVariantSwitched.decode(reader, reader.uint32());
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.trackVariantDisabled = MediaEvent_TrackVariantDisabled.decode(reader, reader.uint32());
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.trackVariantEnabled = MediaEvent_TrackVariantEnabled.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent {
    return {
      endpointUpdated: isSet(object.endpointUpdated)
        ? MediaEvent_EndpointUpdated.fromJSON(object.endpointUpdated)
        : undefined,
      trackUpdated: isSet(object.trackUpdated) ? MediaEvent_TrackUpdated.fromJSON(object.trackUpdated) : undefined,
      tracksAdded: isSet(object.tracksAdded) ? MediaEvent_TracksAdded.fromJSON(object.tracksAdded) : undefined,
      tracksRemoved: isSet(object.tracksRemoved) ? MediaEvent_TracksRemoved.fromJSON(object.tracksRemoved) : undefined,
      endpointAdded: isSet(object.endpointAdded) ? MediaEvent_EndpointAdded.fromJSON(object.endpointAdded) : undefined,
      endpointRemoved: isSet(object.endpointRemoved)
        ? MediaEvent_EndpointRemoved.fromJSON(object.endpointRemoved)
        : undefined,
      connected: isSet(object.connected) ? MediaEvent_Connected.fromJSON(object.connected) : undefined,
      error: isSet(object.error) ? MediaEvent_Error.fromJSON(object.error) : undefined,
      offerData: isSet(object.offerData) ? MediaEvent_OfferData.fromJSON(object.offerData) : undefined,
      candidate: isSet(object.candidate) ? Candidate.fromJSON(object.candidate) : undefined,
      sdpAnswer: isSet(object.sdpAnswer) ? MediaEvent_SdpAnswer.fromJSON(object.sdpAnswer) : undefined,
      vadNotification: isSet(object.vadNotification)
        ? MediaEvent_VadNotification.fromJSON(object.vadNotification)
        : undefined,
      trackVariantSwitched: isSet(object.trackVariantSwitched)
        ? MediaEvent_TrackVariantSwitched.fromJSON(object.trackVariantSwitched)
        : undefined,
      trackVariantDisabled: isSet(object.trackVariantDisabled)
        ? MediaEvent_TrackVariantDisabled.fromJSON(object.trackVariantDisabled)
        : undefined,
      trackVariantEnabled: isSet(object.trackVariantEnabled)
        ? MediaEvent_TrackVariantEnabled.fromJSON(object.trackVariantEnabled)
        : undefined,
    };
  },

  toJSON(message: MediaEvent): unknown {
    const obj: any = {};
    if (message.endpointUpdated !== undefined) {
      obj.endpointUpdated = MediaEvent_EndpointUpdated.toJSON(message.endpointUpdated);
    }
    if (message.trackUpdated !== undefined) {
      obj.trackUpdated = MediaEvent_TrackUpdated.toJSON(message.trackUpdated);
    }
    if (message.tracksAdded !== undefined) {
      obj.tracksAdded = MediaEvent_TracksAdded.toJSON(message.tracksAdded);
    }
    if (message.tracksRemoved !== undefined) {
      obj.tracksRemoved = MediaEvent_TracksRemoved.toJSON(message.tracksRemoved);
    }
    if (message.endpointAdded !== undefined) {
      obj.endpointAdded = MediaEvent_EndpointAdded.toJSON(message.endpointAdded);
    }
    if (message.endpointRemoved !== undefined) {
      obj.endpointRemoved = MediaEvent_EndpointRemoved.toJSON(message.endpointRemoved);
    }
    if (message.connected !== undefined) {
      obj.connected = MediaEvent_Connected.toJSON(message.connected);
    }
    if (message.error !== undefined) {
      obj.error = MediaEvent_Error.toJSON(message.error);
    }
    if (message.offerData !== undefined) {
      obj.offerData = MediaEvent_OfferData.toJSON(message.offerData);
    }
    if (message.candidate !== undefined) {
      obj.candidate = Candidate.toJSON(message.candidate);
    }
    if (message.sdpAnswer !== undefined) {
      obj.sdpAnswer = MediaEvent_SdpAnswer.toJSON(message.sdpAnswer);
    }
    if (message.vadNotification !== undefined) {
      obj.vadNotification = MediaEvent_VadNotification.toJSON(message.vadNotification);
    }
    if (message.trackVariantSwitched !== undefined) {
      obj.trackVariantSwitched = MediaEvent_TrackVariantSwitched.toJSON(message.trackVariantSwitched);
    }
    if (message.trackVariantDisabled !== undefined) {
      obj.trackVariantDisabled = MediaEvent_TrackVariantDisabled.toJSON(message.trackVariantDisabled);
    }
    if (message.trackVariantEnabled !== undefined) {
      obj.trackVariantEnabled = MediaEvent_TrackVariantEnabled.toJSON(message.trackVariantEnabled);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent>, I>>(base?: I): MediaEvent {
    return MediaEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent>, I>>(object: I): MediaEvent {
    const message = createBaseMediaEvent();
    message.endpointUpdated = (object.endpointUpdated !== undefined && object.endpointUpdated !== null)
      ? MediaEvent_EndpointUpdated.fromPartial(object.endpointUpdated)
      : undefined;
    message.trackUpdated = (object.trackUpdated !== undefined && object.trackUpdated !== null)
      ? MediaEvent_TrackUpdated.fromPartial(object.trackUpdated)
      : undefined;
    message.tracksAdded = (object.tracksAdded !== undefined && object.tracksAdded !== null)
      ? MediaEvent_TracksAdded.fromPartial(object.tracksAdded)
      : undefined;
    message.tracksRemoved = (object.tracksRemoved !== undefined && object.tracksRemoved !== null)
      ? MediaEvent_TracksRemoved.fromPartial(object.tracksRemoved)
      : undefined;
    message.endpointAdded = (object.endpointAdded !== undefined && object.endpointAdded !== null)
      ? MediaEvent_EndpointAdded.fromPartial(object.endpointAdded)
      : undefined;
    message.endpointRemoved = (object.endpointRemoved !== undefined && object.endpointRemoved !== null)
      ? MediaEvent_EndpointRemoved.fromPartial(object.endpointRemoved)
      : undefined;
    message.connected = (object.connected !== undefined && object.connected !== null)
      ? MediaEvent_Connected.fromPartial(object.connected)
      : undefined;
    message.error = (object.error !== undefined && object.error !== null)
      ? MediaEvent_Error.fromPartial(object.error)
      : undefined;
    message.offerData = (object.offerData !== undefined && object.offerData !== null)
      ? MediaEvent_OfferData.fromPartial(object.offerData)
      : undefined;
    message.candidate = (object.candidate !== undefined && object.candidate !== null)
      ? Candidate.fromPartial(object.candidate)
      : undefined;
    message.sdpAnswer = (object.sdpAnswer !== undefined && object.sdpAnswer !== null)
      ? MediaEvent_SdpAnswer.fromPartial(object.sdpAnswer)
      : undefined;
    message.vadNotification = (object.vadNotification !== undefined && object.vadNotification !== null)
      ? MediaEvent_VadNotification.fromPartial(object.vadNotification)
      : undefined;
    message.trackVariantSwitched = (object.trackVariantSwitched !== undefined && object.trackVariantSwitched !== null)
      ? MediaEvent_TrackVariantSwitched.fromPartial(object.trackVariantSwitched)
      : undefined;
    message.trackVariantDisabled = (object.trackVariantDisabled !== undefined && object.trackVariantDisabled !== null)
      ? MediaEvent_TrackVariantDisabled.fromPartial(object.trackVariantDisabled)
      : undefined;
    message.trackVariantEnabled = (object.trackVariantEnabled !== undefined && object.trackVariantEnabled !== null)
      ? MediaEvent_TrackVariantEnabled.fromPartial(object.trackVariantEnabled)
      : undefined;
    return message;
  },
};

function createBaseMediaEvent_Track(): MediaEvent_Track {
  return { metadataJson: "", simulcastConfig: undefined };
}

export const MediaEvent_Track: MessageFns<MediaEvent_Track> = {
  encode(message: MediaEvent_Track, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadataJson !== "") {
      writer.uint32(10).string(message.metadataJson);
    }
    if (message.simulcastConfig !== undefined) {
      MediaEvent_Track_SimulcastConfig.encode(message.simulcastConfig, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_Track {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_Track();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadataJson = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.simulcastConfig = MediaEvent_Track_SimulcastConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_Track {
    return {
      metadataJson: isSet(object.metadataJson) ? globalThis.String(object.metadataJson) : "",
      simulcastConfig: isSet(object.simulcastConfig)
        ? MediaEvent_Track_SimulcastConfig.fromJSON(object.simulcastConfig)
        : undefined,
    };
  },

  toJSON(message: MediaEvent_Track): unknown {
    const obj: any = {};
    if (message.metadataJson !== "") {
      obj.metadataJson = message.metadataJson;
    }
    if (message.simulcastConfig !== undefined) {
      obj.simulcastConfig = MediaEvent_Track_SimulcastConfig.toJSON(message.simulcastConfig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_Track>, I>>(base?: I): MediaEvent_Track {
    return MediaEvent_Track.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_Track>, I>>(object: I): MediaEvent_Track {
    const message = createBaseMediaEvent_Track();
    message.metadataJson = object.metadataJson ?? "";
    message.simulcastConfig = (object.simulcastConfig !== undefined && object.simulcastConfig !== null)
      ? MediaEvent_Track_SimulcastConfig.fromPartial(object.simulcastConfig)
      : undefined;
    return message;
  },
};

function createBaseMediaEvent_Track_SimulcastConfig(): MediaEvent_Track_SimulcastConfig {
  return { enabled: false, enabledVariants: [], disabledVariants: [] };
}

export const MediaEvent_Track_SimulcastConfig: MessageFns<MediaEvent_Track_SimulcastConfig> = {
  encode(message: MediaEvent_Track_SimulcastConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    writer.uint32(18).fork();
    for (const v of message.enabledVariants) {
      writer.int32(v);
    }
    writer.join();
    writer.uint32(26).fork();
    for (const v of message.disabledVariants) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_Track_SimulcastConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_Track_SimulcastConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.enabledVariants.push(reader.int32() as any);

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.enabledVariants.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 3: {
          if (tag === 24) {
            message.disabledVariants.push(reader.int32() as any);

            continue;
          }

          if (tag === 26) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.disabledVariants.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_Track_SimulcastConfig {
    return {
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      enabledVariants: globalThis.Array.isArray(object?.enabledVariants)
        ? object.enabledVariants.map((e: any) => variantFromJSON(e))
        : [],
      disabledVariants: globalThis.Array.isArray(object?.disabledVariants)
        ? object.disabledVariants.map((e: any) => variantFromJSON(e))
        : [],
    };
  },

  toJSON(message: MediaEvent_Track_SimulcastConfig): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.enabledVariants?.length) {
      obj.enabledVariants = message.enabledVariants.map((e) => variantToJSON(e));
    }
    if (message.disabledVariants?.length) {
      obj.disabledVariants = message.disabledVariants.map((e) => variantToJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_Track_SimulcastConfig>, I>>(
    base?: I,
  ): MediaEvent_Track_SimulcastConfig {
    return MediaEvent_Track_SimulcastConfig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_Track_SimulcastConfig>, I>>(
    object: I,
  ): MediaEvent_Track_SimulcastConfig {
    const message = createBaseMediaEvent_Track_SimulcastConfig();
    message.enabled = object.enabled ?? false;
    message.enabledVariants = object.enabledVariants?.map((e) => e) || [];
    message.disabledVariants = object.disabledVariants?.map((e) => e) || [];
    return message;
  },
};

function createBaseMediaEvent_Endpoint(): MediaEvent_Endpoint {
  return { endpointType: "", metadataJson: "", trackIdToTrack: {} };
}

export const MediaEvent_Endpoint: MessageFns<MediaEvent_Endpoint> = {
  encode(message: MediaEvent_Endpoint, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointType !== "") {
      writer.uint32(18).string(message.endpointType);
    }
    if (message.metadataJson !== "") {
      writer.uint32(26).string(message.metadataJson);
    }
    Object.entries(message.trackIdToTrack).forEach(([key, value]) => {
      MediaEvent_Endpoint_TrackIdToTrackEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_Endpoint {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_Endpoint();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endpointType = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadataJson = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          const entry4 = MediaEvent_Endpoint_TrackIdToTrackEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.trackIdToTrack[entry4.key] = entry4.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_Endpoint {
    return {
      endpointType: isSet(object.endpointType) ? globalThis.String(object.endpointType) : "",
      metadataJson: isSet(object.metadataJson) ? globalThis.String(object.metadataJson) : "",
      trackIdToTrack: isObject(object.trackIdToTrack)
        ? Object.entries(object.trackIdToTrack).reduce<{ [key: string]: MediaEvent_Track }>((acc, [key, value]) => {
          acc[key] = MediaEvent_Track.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: MediaEvent_Endpoint): unknown {
    const obj: any = {};
    if (message.endpointType !== "") {
      obj.endpointType = message.endpointType;
    }
    if (message.metadataJson !== "") {
      obj.metadataJson = message.metadataJson;
    }
    if (message.trackIdToTrack) {
      const entries = Object.entries(message.trackIdToTrack);
      if (entries.length > 0) {
        obj.trackIdToTrack = {};
        entries.forEach(([k, v]) => {
          obj.trackIdToTrack[k] = MediaEvent_Track.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_Endpoint>, I>>(base?: I): MediaEvent_Endpoint {
    return MediaEvent_Endpoint.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_Endpoint>, I>>(object: I): MediaEvent_Endpoint {
    const message = createBaseMediaEvent_Endpoint();
    message.endpointType = object.endpointType ?? "";
    message.metadataJson = object.metadataJson ?? "";
    message.trackIdToTrack = Object.entries(object.trackIdToTrack ?? {}).reduce<{ [key: string]: MediaEvent_Track }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = MediaEvent_Track.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseMediaEvent_Endpoint_TrackIdToTrackEntry(): MediaEvent_Endpoint_TrackIdToTrackEntry {
  return { key: "", value: undefined };
}

export const MediaEvent_Endpoint_TrackIdToTrackEntry: MessageFns<MediaEvent_Endpoint_TrackIdToTrackEntry> = {
  encode(message: MediaEvent_Endpoint_TrackIdToTrackEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      MediaEvent_Track.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_Endpoint_TrackIdToTrackEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_Endpoint_TrackIdToTrackEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = MediaEvent_Track.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_Endpoint_TrackIdToTrackEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? MediaEvent_Track.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: MediaEvent_Endpoint_TrackIdToTrackEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = MediaEvent_Track.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_Endpoint_TrackIdToTrackEntry>, I>>(
    base?: I,
  ): MediaEvent_Endpoint_TrackIdToTrackEntry {
    return MediaEvent_Endpoint_TrackIdToTrackEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_Endpoint_TrackIdToTrackEntry>, I>>(
    object: I,
  ): MediaEvent_Endpoint_TrackIdToTrackEntry {
    const message = createBaseMediaEvent_Endpoint_TrackIdToTrackEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? MediaEvent_Track.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseMediaEvent_IceServer(): MediaEvent_IceServer {
  return { credential: "", urls: [], username: "" };
}

export const MediaEvent_IceServer: MessageFns<MediaEvent_IceServer> = {
  encode(message: MediaEvent_IceServer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.credential !== "") {
      writer.uint32(10).string(message.credential);
    }
    for (const v of message.urls) {
      writer.uint32(18).string(v!);
    }
    if (message.username !== "") {
      writer.uint32(26).string(message.username);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_IceServer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_IceServer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.credential = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.urls.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.username = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_IceServer {
    return {
      credential: isSet(object.credential) ? globalThis.String(object.credential) : "",
      urls: globalThis.Array.isArray(object?.urls) ? object.urls.map((e: any) => globalThis.String(e)) : [],
      username: isSet(object.username) ? globalThis.String(object.username) : "",
    };
  },

  toJSON(message: MediaEvent_IceServer): unknown {
    const obj: any = {};
    if (message.credential !== "") {
      obj.credential = message.credential;
    }
    if (message.urls?.length) {
      obj.urls = message.urls;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_IceServer>, I>>(base?: I): MediaEvent_IceServer {
    return MediaEvent_IceServer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_IceServer>, I>>(object: I): MediaEvent_IceServer {
    const message = createBaseMediaEvent_IceServer();
    message.credential = object.credential ?? "";
    message.urls = object.urls?.map((e) => e) || [];
    message.username = object.username ?? "";
    return message;
  },
};

function createBaseMediaEvent_EndpointUpdated(): MediaEvent_EndpointUpdated {
  return { endpointId: "", metadataJson: "" };
}

export const MediaEvent_EndpointUpdated: MessageFns<MediaEvent_EndpointUpdated> = {
  encode(message: MediaEvent_EndpointUpdated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    if (message.metadataJson !== "") {
      writer.uint32(18).string(message.metadataJson);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_EndpointUpdated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_EndpointUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadataJson = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_EndpointUpdated {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      metadataJson: isSet(object.metadataJson) ? globalThis.String(object.metadataJson) : "",
    };
  },

  toJSON(message: MediaEvent_EndpointUpdated): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.metadataJson !== "") {
      obj.metadataJson = message.metadataJson;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_EndpointUpdated>, I>>(base?: I): MediaEvent_EndpointUpdated {
    return MediaEvent_EndpointUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_EndpointUpdated>, I>>(object: I): MediaEvent_EndpointUpdated {
    const message = createBaseMediaEvent_EndpointUpdated();
    message.endpointId = object.endpointId ?? "";
    message.metadataJson = object.metadataJson ?? "";
    return message;
  },
};

function createBaseMediaEvent_TrackUpdated(): MediaEvent_TrackUpdated {
  return { endpointId: "", trackId: "", metadataJson: "" };
}

export const MediaEvent_TrackUpdated: MessageFns<MediaEvent_TrackUpdated> = {
  encode(message: MediaEvent_TrackUpdated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    if (message.trackId !== "") {
      writer.uint32(18).string(message.trackId);
    }
    if (message.metadataJson !== "") {
      writer.uint32(26).string(message.metadataJson);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_TrackUpdated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_TrackUpdated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadataJson = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_TrackUpdated {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      metadataJson: isSet(object.metadataJson) ? globalThis.String(object.metadataJson) : "",
    };
  },

  toJSON(message: MediaEvent_TrackUpdated): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.metadataJson !== "") {
      obj.metadataJson = message.metadataJson;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_TrackUpdated>, I>>(base?: I): MediaEvent_TrackUpdated {
    return MediaEvent_TrackUpdated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_TrackUpdated>, I>>(object: I): MediaEvent_TrackUpdated {
    const message = createBaseMediaEvent_TrackUpdated();
    message.endpointId = object.endpointId ?? "";
    message.trackId = object.trackId ?? "";
    message.metadataJson = object.metadataJson ?? "";
    return message;
  },
};

function createBaseMediaEvent_TracksAdded(): MediaEvent_TracksAdded {
  return { endpointId: "", trackIdToTrack: {} };
}

export const MediaEvent_TracksAdded: MessageFns<MediaEvent_TracksAdded> = {
  encode(message: MediaEvent_TracksAdded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    Object.entries(message.trackIdToTrack).forEach(([key, value]) => {
      MediaEvent_TracksAdded_TrackIdToTrackEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_TracksAdded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_TracksAdded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = MediaEvent_TracksAdded_TrackIdToTrackEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.trackIdToTrack[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_TracksAdded {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      trackIdToTrack: isObject(object.trackIdToTrack)
        ? Object.entries(object.trackIdToTrack).reduce<{ [key: string]: MediaEvent_Track }>((acc, [key, value]) => {
          acc[key] = MediaEvent_Track.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: MediaEvent_TracksAdded): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.trackIdToTrack) {
      const entries = Object.entries(message.trackIdToTrack);
      if (entries.length > 0) {
        obj.trackIdToTrack = {};
        entries.forEach(([k, v]) => {
          obj.trackIdToTrack[k] = MediaEvent_Track.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_TracksAdded>, I>>(base?: I): MediaEvent_TracksAdded {
    return MediaEvent_TracksAdded.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_TracksAdded>, I>>(object: I): MediaEvent_TracksAdded {
    const message = createBaseMediaEvent_TracksAdded();
    message.endpointId = object.endpointId ?? "";
    message.trackIdToTrack = Object.entries(object.trackIdToTrack ?? {}).reduce<{ [key: string]: MediaEvent_Track }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = MediaEvent_Track.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseMediaEvent_TracksAdded_TrackIdToTrackEntry(): MediaEvent_TracksAdded_TrackIdToTrackEntry {
  return { key: "", value: undefined };
}

export const MediaEvent_TracksAdded_TrackIdToTrackEntry: MessageFns<MediaEvent_TracksAdded_TrackIdToTrackEntry> = {
  encode(message: MediaEvent_TracksAdded_TrackIdToTrackEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      MediaEvent_Track.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_TracksAdded_TrackIdToTrackEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_TracksAdded_TrackIdToTrackEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = MediaEvent_Track.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_TracksAdded_TrackIdToTrackEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? MediaEvent_Track.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: MediaEvent_TracksAdded_TrackIdToTrackEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = MediaEvent_Track.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_TracksAdded_TrackIdToTrackEntry>, I>>(
    base?: I,
  ): MediaEvent_TracksAdded_TrackIdToTrackEntry {
    return MediaEvent_TracksAdded_TrackIdToTrackEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_TracksAdded_TrackIdToTrackEntry>, I>>(
    object: I,
  ): MediaEvent_TracksAdded_TrackIdToTrackEntry {
    const message = createBaseMediaEvent_TracksAdded_TrackIdToTrackEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? MediaEvent_Track.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseMediaEvent_TracksRemoved(): MediaEvent_TracksRemoved {
  return { endpointId: "", trackIds: [] };
}

export const MediaEvent_TracksRemoved: MessageFns<MediaEvent_TracksRemoved> = {
  encode(message: MediaEvent_TracksRemoved, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    for (const v of message.trackIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_TracksRemoved {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_TracksRemoved();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_TracksRemoved {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      trackIds: globalThis.Array.isArray(object?.trackIds) ? object.trackIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: MediaEvent_TracksRemoved): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.trackIds?.length) {
      obj.trackIds = message.trackIds;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_TracksRemoved>, I>>(base?: I): MediaEvent_TracksRemoved {
    return MediaEvent_TracksRemoved.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_TracksRemoved>, I>>(object: I): MediaEvent_TracksRemoved {
    const message = createBaseMediaEvent_TracksRemoved();
    message.endpointId = object.endpointId ?? "";
    message.trackIds = object.trackIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseMediaEvent_EndpointAdded(): MediaEvent_EndpointAdded {
  return { endpointId: "", metadataJson: "" };
}

export const MediaEvent_EndpointAdded: MessageFns<MediaEvent_EndpointAdded> = {
  encode(message: MediaEvent_EndpointAdded, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    if (message.metadataJson !== "") {
      writer.uint32(18).string(message.metadataJson);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_EndpointAdded {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_EndpointAdded();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.metadataJson = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_EndpointAdded {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      metadataJson: isSet(object.metadataJson) ? globalThis.String(object.metadataJson) : "",
    };
  },

  toJSON(message: MediaEvent_EndpointAdded): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.metadataJson !== "") {
      obj.metadataJson = message.metadataJson;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_EndpointAdded>, I>>(base?: I): MediaEvent_EndpointAdded {
    return MediaEvent_EndpointAdded.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_EndpointAdded>, I>>(object: I): MediaEvent_EndpointAdded {
    const message = createBaseMediaEvent_EndpointAdded();
    message.endpointId = object.endpointId ?? "";
    message.metadataJson = object.metadataJson ?? "";
    return message;
  },
};

function createBaseMediaEvent_Connected(): MediaEvent_Connected {
  return { endpointId: "", endpointIdToEndpoint: {}, iceServers: [] };
}

export const MediaEvent_Connected: MessageFns<MediaEvent_Connected> = {
  encode(message: MediaEvent_Connected, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    Object.entries(message.endpointIdToEndpoint).forEach(([key, value]) => {
      MediaEvent_Connected_EndpointIdToEndpointEntry.encode({ key: key as any, value }, writer.uint32(18).fork())
        .join();
    });
    for (const v of message.iceServers) {
      MediaEvent_IceServer.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_Connected {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_Connected();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = MediaEvent_Connected_EndpointIdToEndpointEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.endpointIdToEndpoint[entry2.key] = entry2.value;
          }
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.iceServers.push(MediaEvent_IceServer.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_Connected {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      endpointIdToEndpoint: isObject(object.endpointIdToEndpoint)
        ? Object.entries(object.endpointIdToEndpoint).reduce<{ [key: string]: MediaEvent_Endpoint }>(
          (acc, [key, value]) => {
            acc[key] = MediaEvent_Endpoint.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
      iceServers: globalThis.Array.isArray(object?.iceServers)
        ? object.iceServers.map((e: any) => MediaEvent_IceServer.fromJSON(e))
        : [],
    };
  },

  toJSON(message: MediaEvent_Connected): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.endpointIdToEndpoint) {
      const entries = Object.entries(message.endpointIdToEndpoint);
      if (entries.length > 0) {
        obj.endpointIdToEndpoint = {};
        entries.forEach(([k, v]) => {
          obj.endpointIdToEndpoint[k] = MediaEvent_Endpoint.toJSON(v);
        });
      }
    }
    if (message.iceServers?.length) {
      obj.iceServers = message.iceServers.map((e) => MediaEvent_IceServer.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_Connected>, I>>(base?: I): MediaEvent_Connected {
    return MediaEvent_Connected.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_Connected>, I>>(object: I): MediaEvent_Connected {
    const message = createBaseMediaEvent_Connected();
    message.endpointId = object.endpointId ?? "";
    message.endpointIdToEndpoint = Object.entries(object.endpointIdToEndpoint ?? {}).reduce<
      { [key: string]: MediaEvent_Endpoint }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = MediaEvent_Endpoint.fromPartial(value);
      }
      return acc;
    }, {});
    message.iceServers = object.iceServers?.map((e) => MediaEvent_IceServer.fromPartial(e)) || [];
    return message;
  },
};

function createBaseMediaEvent_Connected_EndpointIdToEndpointEntry(): MediaEvent_Connected_EndpointIdToEndpointEntry {
  return { key: "", value: undefined };
}

export const MediaEvent_Connected_EndpointIdToEndpointEntry: MessageFns<
  MediaEvent_Connected_EndpointIdToEndpointEntry
> = {
  encode(
    message: MediaEvent_Connected_EndpointIdToEndpointEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      MediaEvent_Endpoint.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_Connected_EndpointIdToEndpointEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_Connected_EndpointIdToEndpointEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = MediaEvent_Endpoint.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_Connected_EndpointIdToEndpointEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? MediaEvent_Endpoint.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: MediaEvent_Connected_EndpointIdToEndpointEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = MediaEvent_Endpoint.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_Connected_EndpointIdToEndpointEntry>, I>>(
    base?: I,
  ): MediaEvent_Connected_EndpointIdToEndpointEntry {
    return MediaEvent_Connected_EndpointIdToEndpointEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_Connected_EndpointIdToEndpointEntry>, I>>(
    object: I,
  ): MediaEvent_Connected_EndpointIdToEndpointEntry {
    const message = createBaseMediaEvent_Connected_EndpointIdToEndpointEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? MediaEvent_Endpoint.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseMediaEvent_EndpointRemoved(): MediaEvent_EndpointRemoved {
  return { endpointId: "" };
}

export const MediaEvent_EndpointRemoved: MessageFns<MediaEvent_EndpointRemoved> = {
  encode(message: MediaEvent_EndpointRemoved, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_EndpointRemoved {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_EndpointRemoved();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_EndpointRemoved {
    return { endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "" };
  },

  toJSON(message: MediaEvent_EndpointRemoved): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_EndpointRemoved>, I>>(base?: I): MediaEvent_EndpointRemoved {
    return MediaEvent_EndpointRemoved.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_EndpointRemoved>, I>>(object: I): MediaEvent_EndpointRemoved {
    const message = createBaseMediaEvent_EndpointRemoved();
    message.endpointId = object.endpointId ?? "";
    return message;
  },
};

function createBaseMediaEvent_Error(): MediaEvent_Error {
  return { message: "" };
}

export const MediaEvent_Error: MessageFns<MediaEvent_Error> = {
  encode(message: MediaEvent_Error, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.message !== "") {
      writer.uint32(10).string(message.message);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_Error {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_Error();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_Error {
    return { message: isSet(object.message) ? globalThis.String(object.message) : "" };
  },

  toJSON(message: MediaEvent_Error): unknown {
    const obj: any = {};
    if (message.message !== "") {
      obj.message = message.message;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_Error>, I>>(base?: I): MediaEvent_Error {
    return MediaEvent_Error.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_Error>, I>>(object: I): MediaEvent_Error {
    const message = createBaseMediaEvent_Error();
    message.message = object.message ?? "";
    return message;
  },
};

function createBaseMediaEvent_OfferData(): MediaEvent_OfferData {
  return { tracksTypes: undefined };
}

export const MediaEvent_OfferData: MessageFns<MediaEvent_OfferData> = {
  encode(message: MediaEvent_OfferData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.tracksTypes !== undefined) {
      MediaEvent_OfferData_TrackTypes.encode(message.tracksTypes, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_OfferData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_OfferData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tracksTypes = MediaEvent_OfferData_TrackTypes.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_OfferData {
    return {
      tracksTypes: isSet(object.tracksTypes) ? MediaEvent_OfferData_TrackTypes.fromJSON(object.tracksTypes) : undefined,
    };
  },

  toJSON(message: MediaEvent_OfferData): unknown {
    const obj: any = {};
    if (message.tracksTypes !== undefined) {
      obj.tracksTypes = MediaEvent_OfferData_TrackTypes.toJSON(message.tracksTypes);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_OfferData>, I>>(base?: I): MediaEvent_OfferData {
    return MediaEvent_OfferData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_OfferData>, I>>(object: I): MediaEvent_OfferData {
    const message = createBaseMediaEvent_OfferData();
    message.tracksTypes = (object.tracksTypes !== undefined && object.tracksTypes !== null)
      ? MediaEvent_OfferData_TrackTypes.fromPartial(object.tracksTypes)
      : undefined;
    return message;
  },
};

function createBaseMediaEvent_OfferData_TrackTypes(): MediaEvent_OfferData_TrackTypes {
  return { audio: 0, video: 0 };
}

export const MediaEvent_OfferData_TrackTypes: MessageFns<MediaEvent_OfferData_TrackTypes> = {
  encode(message: MediaEvent_OfferData_TrackTypes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.audio !== 0) {
      writer.uint32(8).int32(message.audio);
    }
    if (message.video !== 0) {
      writer.uint32(16).int32(message.video);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_OfferData_TrackTypes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_OfferData_TrackTypes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.audio = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.video = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_OfferData_TrackTypes {
    return {
      audio: isSet(object.audio) ? globalThis.Number(object.audio) : 0,
      video: isSet(object.video) ? globalThis.Number(object.video) : 0,
    };
  },

  toJSON(message: MediaEvent_OfferData_TrackTypes): unknown {
    const obj: any = {};
    if (message.audio !== 0) {
      obj.audio = Math.round(message.audio);
    }
    if (message.video !== 0) {
      obj.video = Math.round(message.video);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_OfferData_TrackTypes>, I>>(base?: I): MediaEvent_OfferData_TrackTypes {
    return MediaEvent_OfferData_TrackTypes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_OfferData_TrackTypes>, I>>(
    object: I,
  ): MediaEvent_OfferData_TrackTypes {
    const message = createBaseMediaEvent_OfferData_TrackTypes();
    message.audio = object.audio ?? 0;
    message.video = object.video ?? 0;
    return message;
  },
};

function createBaseMediaEvent_SdpAnswer(): MediaEvent_SdpAnswer {
  return { sdp: "", midToTrackId: {} };
}

export const MediaEvent_SdpAnswer: MessageFns<MediaEvent_SdpAnswer> = {
  encode(message: MediaEvent_SdpAnswer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sdp !== "") {
      writer.uint32(10).string(message.sdp);
    }
    Object.entries(message.midToTrackId).forEach(([key, value]) => {
      MediaEvent_SdpAnswer_MidToTrackIdEntry.encode({ key: key as any, value }, writer.uint32(18).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_SdpAnswer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_SdpAnswer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sdp = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          const entry2 = MediaEvent_SdpAnswer_MidToTrackIdEntry.decode(reader, reader.uint32());
          if (entry2.value !== undefined) {
            message.midToTrackId[entry2.key] = entry2.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_SdpAnswer {
    return {
      sdp: isSet(object.sdp) ? globalThis.String(object.sdp) : "",
      midToTrackId: isObject(object.midToTrackId)
        ? Object.entries(object.midToTrackId).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: MediaEvent_SdpAnswer): unknown {
    const obj: any = {};
    if (message.sdp !== "") {
      obj.sdp = message.sdp;
    }
    if (message.midToTrackId) {
      const entries = Object.entries(message.midToTrackId);
      if (entries.length > 0) {
        obj.midToTrackId = {};
        entries.forEach(([k, v]) => {
          obj.midToTrackId[k] = v;
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_SdpAnswer>, I>>(base?: I): MediaEvent_SdpAnswer {
    return MediaEvent_SdpAnswer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_SdpAnswer>, I>>(object: I): MediaEvent_SdpAnswer {
    const message = createBaseMediaEvent_SdpAnswer();
    message.sdp = object.sdp ?? "";
    message.midToTrackId = Object.entries(object.midToTrackId ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseMediaEvent_SdpAnswer_MidToTrackIdEntry(): MediaEvent_SdpAnswer_MidToTrackIdEntry {
  return { key: "", value: "" };
}

export const MediaEvent_SdpAnswer_MidToTrackIdEntry: MessageFns<MediaEvent_SdpAnswer_MidToTrackIdEntry> = {
  encode(message: MediaEvent_SdpAnswer_MidToTrackIdEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_SdpAnswer_MidToTrackIdEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_SdpAnswer_MidToTrackIdEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_SdpAnswer_MidToTrackIdEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: MediaEvent_SdpAnswer_MidToTrackIdEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_SdpAnswer_MidToTrackIdEntry>, I>>(
    base?: I,
  ): MediaEvent_SdpAnswer_MidToTrackIdEntry {
    return MediaEvent_SdpAnswer_MidToTrackIdEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_SdpAnswer_MidToTrackIdEntry>, I>>(
    object: I,
  ): MediaEvent_SdpAnswer_MidToTrackIdEntry {
    const message = createBaseMediaEvent_SdpAnswer_MidToTrackIdEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseMediaEvent_VadNotification(): MediaEvent_VadNotification {
  return { trackId: "", status: 0 };
}

export const MediaEvent_VadNotification: MessageFns<MediaEvent_VadNotification> = {
  encode(message: MediaEvent_VadNotification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackId !== "") {
      writer.uint32(10).string(message.trackId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_VadNotification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_VadNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_VadNotification {
    return {
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      status: isSet(object.status) ? mediaEvent_VadNotification_StatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: MediaEvent_VadNotification): unknown {
    const obj: any = {};
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.status !== 0) {
      obj.status = mediaEvent_VadNotification_StatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_VadNotification>, I>>(base?: I): MediaEvent_VadNotification {
    return MediaEvent_VadNotification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_VadNotification>, I>>(object: I): MediaEvent_VadNotification {
    const message = createBaseMediaEvent_VadNotification();
    message.trackId = object.trackId ?? "";
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseMediaEvent_TrackVariantSwitched(): MediaEvent_TrackVariantSwitched {
  return { endpointId: "", trackId: "", variant: 0 };
}

export const MediaEvent_TrackVariantSwitched: MessageFns<MediaEvent_TrackVariantSwitched> = {
  encode(message: MediaEvent_TrackVariantSwitched, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    if (message.trackId !== "") {
      writer.uint32(18).string(message.trackId);
    }
    if (message.variant !== 0) {
      writer.uint32(24).int32(message.variant);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_TrackVariantSwitched {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_TrackVariantSwitched();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.variant = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_TrackVariantSwitched {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      variant: isSet(object.variant) ? variantFromJSON(object.variant) : 0,
    };
  },

  toJSON(message: MediaEvent_TrackVariantSwitched): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.variant !== 0) {
      obj.variant = variantToJSON(message.variant);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_TrackVariantSwitched>, I>>(base?: I): MediaEvent_TrackVariantSwitched {
    return MediaEvent_TrackVariantSwitched.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_TrackVariantSwitched>, I>>(
    object: I,
  ): MediaEvent_TrackVariantSwitched {
    const message = createBaseMediaEvent_TrackVariantSwitched();
    message.endpointId = object.endpointId ?? "";
    message.trackId = object.trackId ?? "";
    message.variant = object.variant ?? 0;
    return message;
  },
};

function createBaseMediaEvent_TrackVariantDisabled(): MediaEvent_TrackVariantDisabled {
  return { endpointId: "", trackId: "", variant: 0 };
}

export const MediaEvent_TrackVariantDisabled: MessageFns<MediaEvent_TrackVariantDisabled> = {
  encode(message: MediaEvent_TrackVariantDisabled, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    if (message.trackId !== "") {
      writer.uint32(18).string(message.trackId);
    }
    if (message.variant !== 0) {
      writer.uint32(24).int32(message.variant);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_TrackVariantDisabled {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_TrackVariantDisabled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.variant = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_TrackVariantDisabled {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      variant: isSet(object.variant) ? variantFromJSON(object.variant) : 0,
    };
  },

  toJSON(message: MediaEvent_TrackVariantDisabled): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.variant !== 0) {
      obj.variant = variantToJSON(message.variant);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_TrackVariantDisabled>, I>>(base?: I): MediaEvent_TrackVariantDisabled {
    return MediaEvent_TrackVariantDisabled.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_TrackVariantDisabled>, I>>(
    object: I,
  ): MediaEvent_TrackVariantDisabled {
    const message = createBaseMediaEvent_TrackVariantDisabled();
    message.endpointId = object.endpointId ?? "";
    message.trackId = object.trackId ?? "";
    message.variant = object.variant ?? 0;
    return message;
  },
};

function createBaseMediaEvent_TrackVariantEnabled(): MediaEvent_TrackVariantEnabled {
  return { endpointId: "", trackId: "", variant: 0 };
}

export const MediaEvent_TrackVariantEnabled: MessageFns<MediaEvent_TrackVariantEnabled> = {
  encode(message: MediaEvent_TrackVariantEnabled, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.endpointId !== "") {
      writer.uint32(10).string(message.endpointId);
    }
    if (message.trackId !== "") {
      writer.uint32(18).string(message.trackId);
    }
    if (message.variant !== 0) {
      writer.uint32(24).int32(message.variant);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MediaEvent_TrackVariantEnabled {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMediaEvent_TrackVariantEnabled();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.endpointId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.variant = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MediaEvent_TrackVariantEnabled {
    return {
      endpointId: isSet(object.endpointId) ? globalThis.String(object.endpointId) : "",
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      variant: isSet(object.variant) ? variantFromJSON(object.variant) : 0,
    };
  },

  toJSON(message: MediaEvent_TrackVariantEnabled): unknown {
    const obj: any = {};
    if (message.endpointId !== "") {
      obj.endpointId = message.endpointId;
    }
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.variant !== 0) {
      obj.variant = variantToJSON(message.variant);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MediaEvent_TrackVariantEnabled>, I>>(base?: I): MediaEvent_TrackVariantEnabled {
    return MediaEvent_TrackVariantEnabled.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MediaEvent_TrackVariantEnabled>, I>>(
    object: I,
  ): MediaEvent_TrackVariantEnabled {
    const message = createBaseMediaEvent_TrackVariantEnabled();
    message.endpointId = object.endpointId ?? "";
    message.trackId = object.trackId ?? "";
    message.variant = object.variant ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
