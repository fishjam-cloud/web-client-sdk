// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.32.0
// source: fishjam/agent_notifications.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Track, TrackEncoding, trackEncodingFromJSON, trackEncodingToJSON } from "./notifications/shared";

export const protobufPackage = "fishjam";

/** Defines any type of message passed from agent peer to Fishjam */
export interface AgentRequest {
  authRequest?: AgentRequest_AuthRequest | undefined;
  addTrack?: AgentRequest_AddTrack | undefined;
  removeTrack?: AgentRequest_RemoveTrack | undefined;
  trackData?: AgentRequest_TrackData | undefined;
  interruptTrack?: AgentRequest_InterruptTrack | undefined;
}

/** Request sent by agent, to authenticate to Fishjam server */
export interface AgentRequest_AuthRequest {
  token: string;
}

/** Request to add a track of the specified type */
export interface AgentRequest_AddTrack {
  /** Specification of the track to be added */
  track:
    | Track
    | undefined;
  /** Parameters of the input data stream */
  codecParams: AgentRequest_AddTrack_CodecParameters | undefined;
}

export interface AgentRequest_AddTrack_CodecParameters {
  /** The format of the input stream, defaults to pcm16 */
  encoding: TrackEncoding;
  /** The sample rate of the input stream, may be omitted for opus */
  sampleRate: number;
  /** The number of channels. 1 means mono, 2 means stereo */
  channels: number;
}

/** Removes the given track */
export interface AgentRequest_RemoveTrack {
  trackId: string;
}

/** Notification containing a chunk of an agent's track's data stream */
export interface AgentRequest_TrackData {
  trackId: string;
  data: Uint8Array;
}

/** Interrupts an agent's outgoing track, preventing already queued audio from being played */
export interface AgentRequest_InterruptTrack {
  trackId: string;
}

/** Defines any type of message passed from Fishjam to agent peer */
export interface AgentResponse {
  authenticated?: AgentResponse_Authenticated | undefined;
  trackData?: AgentResponse_TrackData | undefined;
}

/** Response confirming successful authentication */
export interface AgentResponse_Authenticated {
}

/** Notification containing a chunk of a track's data stream */
export interface AgentResponse_TrackData {
  peerId: string;
  track: Track | undefined;
  data: Uint8Array;
}

function createBaseAgentRequest(): AgentRequest {
  return {
    authRequest: undefined,
    addTrack: undefined,
    removeTrack: undefined,
    trackData: undefined,
    interruptTrack: undefined,
  };
}

export const AgentRequest: MessageFns<AgentRequest> = {
  encode(message: AgentRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authRequest !== undefined) {
      AgentRequest_AuthRequest.encode(message.authRequest, writer.uint32(10).fork()).join();
    }
    if (message.addTrack !== undefined) {
      AgentRequest_AddTrack.encode(message.addTrack, writer.uint32(18).fork()).join();
    }
    if (message.removeTrack !== undefined) {
      AgentRequest_RemoveTrack.encode(message.removeTrack, writer.uint32(26).fork()).join();
    }
    if (message.trackData !== undefined) {
      AgentRequest_TrackData.encode(message.trackData, writer.uint32(34).fork()).join();
    }
    if (message.interruptTrack !== undefined) {
      AgentRequest_InterruptTrack.encode(message.interruptTrack, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authRequest = AgentRequest_AuthRequest.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.addTrack = AgentRequest_AddTrack.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.removeTrack = AgentRequest_RemoveTrack.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.trackData = AgentRequest_TrackData.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.interruptTrack = AgentRequest_InterruptTrack.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentRequest {
    return {
      authRequest: isSet(object.authRequest) ? AgentRequest_AuthRequest.fromJSON(object.authRequest) : undefined,
      addTrack: isSet(object.addTrack) ? AgentRequest_AddTrack.fromJSON(object.addTrack) : undefined,
      removeTrack: isSet(object.removeTrack) ? AgentRequest_RemoveTrack.fromJSON(object.removeTrack) : undefined,
      trackData: isSet(object.trackData) ? AgentRequest_TrackData.fromJSON(object.trackData) : undefined,
      interruptTrack: isSet(object.interruptTrack)
        ? AgentRequest_InterruptTrack.fromJSON(object.interruptTrack)
        : undefined,
    };
  },

  toJSON(message: AgentRequest): unknown {
    const obj: any = {};
    if (message.authRequest !== undefined) {
      obj.authRequest = AgentRequest_AuthRequest.toJSON(message.authRequest);
    }
    if (message.addTrack !== undefined) {
      obj.addTrack = AgentRequest_AddTrack.toJSON(message.addTrack);
    }
    if (message.removeTrack !== undefined) {
      obj.removeTrack = AgentRequest_RemoveTrack.toJSON(message.removeTrack);
    }
    if (message.trackData !== undefined) {
      obj.trackData = AgentRequest_TrackData.toJSON(message.trackData);
    }
    if (message.interruptTrack !== undefined) {
      obj.interruptTrack = AgentRequest_InterruptTrack.toJSON(message.interruptTrack);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AgentRequest>, I>>(base?: I): AgentRequest {
    return AgentRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AgentRequest>, I>>(object: I): AgentRequest {
    const message = createBaseAgentRequest();
    message.authRequest = (object.authRequest !== undefined && object.authRequest !== null)
      ? AgentRequest_AuthRequest.fromPartial(object.authRequest)
      : undefined;
    message.addTrack = (object.addTrack !== undefined && object.addTrack !== null)
      ? AgentRequest_AddTrack.fromPartial(object.addTrack)
      : undefined;
    message.removeTrack = (object.removeTrack !== undefined && object.removeTrack !== null)
      ? AgentRequest_RemoveTrack.fromPartial(object.removeTrack)
      : undefined;
    message.trackData = (object.trackData !== undefined && object.trackData !== null)
      ? AgentRequest_TrackData.fromPartial(object.trackData)
      : undefined;
    message.interruptTrack = (object.interruptTrack !== undefined && object.interruptTrack !== null)
      ? AgentRequest_InterruptTrack.fromPartial(object.interruptTrack)
      : undefined;
    return message;
  },
};

function createBaseAgentRequest_AuthRequest(): AgentRequest_AuthRequest {
  return { token: "" };
}

export const AgentRequest_AuthRequest: MessageFns<AgentRequest_AuthRequest> = {
  encode(message: AgentRequest_AuthRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.token !== "") {
      writer.uint32(10).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentRequest_AuthRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentRequest_AuthRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentRequest_AuthRequest {
    return { token: isSet(object.token) ? globalThis.String(object.token) : "" };
  },

  toJSON(message: AgentRequest_AuthRequest): unknown {
    const obj: any = {};
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AgentRequest_AuthRequest>, I>>(base?: I): AgentRequest_AuthRequest {
    return AgentRequest_AuthRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AgentRequest_AuthRequest>, I>>(object: I): AgentRequest_AuthRequest {
    const message = createBaseAgentRequest_AuthRequest();
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseAgentRequest_AddTrack(): AgentRequest_AddTrack {
  return { track: undefined, codecParams: undefined };
}

export const AgentRequest_AddTrack: MessageFns<AgentRequest_AddTrack> = {
  encode(message: AgentRequest_AddTrack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.track !== undefined) {
      Track.encode(message.track, writer.uint32(10).fork()).join();
    }
    if (message.codecParams !== undefined) {
      AgentRequest_AddTrack_CodecParameters.encode(message.codecParams, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentRequest_AddTrack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentRequest_AddTrack();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.track = Track.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.codecParams = AgentRequest_AddTrack_CodecParameters.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentRequest_AddTrack {
    return {
      track: isSet(object.track) ? Track.fromJSON(object.track) : undefined,
      codecParams: isSet(object.codecParams)
        ? AgentRequest_AddTrack_CodecParameters.fromJSON(object.codecParams)
        : undefined,
    };
  },

  toJSON(message: AgentRequest_AddTrack): unknown {
    const obj: any = {};
    if (message.track !== undefined) {
      obj.track = Track.toJSON(message.track);
    }
    if (message.codecParams !== undefined) {
      obj.codecParams = AgentRequest_AddTrack_CodecParameters.toJSON(message.codecParams);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AgentRequest_AddTrack>, I>>(base?: I): AgentRequest_AddTrack {
    return AgentRequest_AddTrack.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AgentRequest_AddTrack>, I>>(object: I): AgentRequest_AddTrack {
    const message = createBaseAgentRequest_AddTrack();
    message.track = (object.track !== undefined && object.track !== null) ? Track.fromPartial(object.track) : undefined;
    message.codecParams = (object.codecParams !== undefined && object.codecParams !== null)
      ? AgentRequest_AddTrack_CodecParameters.fromPartial(object.codecParams)
      : undefined;
    return message;
  },
};

function createBaseAgentRequest_AddTrack_CodecParameters(): AgentRequest_AddTrack_CodecParameters {
  return { encoding: 0, sampleRate: 0, channels: 0 };
}

export const AgentRequest_AddTrack_CodecParameters: MessageFns<AgentRequest_AddTrack_CodecParameters> = {
  encode(message: AgentRequest_AddTrack_CodecParameters, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encoding !== 0) {
      writer.uint32(8).int32(message.encoding);
    }
    if (message.sampleRate !== 0) {
      writer.uint32(16).uint32(message.sampleRate);
    }
    if (message.channels !== 0) {
      writer.uint32(24).uint32(message.channels);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentRequest_AddTrack_CodecParameters {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentRequest_AddTrack_CodecParameters();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.encoding = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.sampleRate = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.channels = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentRequest_AddTrack_CodecParameters {
    return {
      encoding: isSet(object.encoding) ? trackEncodingFromJSON(object.encoding) : 0,
      sampleRate: isSet(object.sampleRate) ? globalThis.Number(object.sampleRate) : 0,
      channels: isSet(object.channels) ? globalThis.Number(object.channels) : 0,
    };
  },

  toJSON(message: AgentRequest_AddTrack_CodecParameters): unknown {
    const obj: any = {};
    if (message.encoding !== 0) {
      obj.encoding = trackEncodingToJSON(message.encoding);
    }
    if (message.sampleRate !== 0) {
      obj.sampleRate = Math.round(message.sampleRate);
    }
    if (message.channels !== 0) {
      obj.channels = Math.round(message.channels);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AgentRequest_AddTrack_CodecParameters>, I>>(
    base?: I,
  ): AgentRequest_AddTrack_CodecParameters {
    return AgentRequest_AddTrack_CodecParameters.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AgentRequest_AddTrack_CodecParameters>, I>>(
    object: I,
  ): AgentRequest_AddTrack_CodecParameters {
    const message = createBaseAgentRequest_AddTrack_CodecParameters();
    message.encoding = object.encoding ?? 0;
    message.sampleRate = object.sampleRate ?? 0;
    message.channels = object.channels ?? 0;
    return message;
  },
};

function createBaseAgentRequest_RemoveTrack(): AgentRequest_RemoveTrack {
  return { trackId: "" };
}

export const AgentRequest_RemoveTrack: MessageFns<AgentRequest_RemoveTrack> = {
  encode(message: AgentRequest_RemoveTrack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackId !== "") {
      writer.uint32(10).string(message.trackId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentRequest_RemoveTrack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentRequest_RemoveTrack();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentRequest_RemoveTrack {
    return { trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "" };
  },

  toJSON(message: AgentRequest_RemoveTrack): unknown {
    const obj: any = {};
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AgentRequest_RemoveTrack>, I>>(base?: I): AgentRequest_RemoveTrack {
    return AgentRequest_RemoveTrack.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AgentRequest_RemoveTrack>, I>>(object: I): AgentRequest_RemoveTrack {
    const message = createBaseAgentRequest_RemoveTrack();
    message.trackId = object.trackId ?? "";
    return message;
  },
};

function createBaseAgentRequest_TrackData(): AgentRequest_TrackData {
  return { trackId: "", data: new Uint8Array(0) };
}

export const AgentRequest_TrackData: MessageFns<AgentRequest_TrackData> = {
  encode(message: AgentRequest_TrackData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackId !== "") {
      writer.uint32(10).string(message.trackId);
    }
    if (message.data.length !== 0) {
      writer.uint32(18).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentRequest_TrackData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentRequest_TrackData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentRequest_TrackData {
    return {
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: AgentRequest_TrackData): unknown {
    const obj: any = {};
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AgentRequest_TrackData>, I>>(base?: I): AgentRequest_TrackData {
    return AgentRequest_TrackData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AgentRequest_TrackData>, I>>(object: I): AgentRequest_TrackData {
    const message = createBaseAgentRequest_TrackData();
    message.trackId = object.trackId ?? "";
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function createBaseAgentRequest_InterruptTrack(): AgentRequest_InterruptTrack {
  return { trackId: "" };
}

export const AgentRequest_InterruptTrack: MessageFns<AgentRequest_InterruptTrack> = {
  encode(message: AgentRequest_InterruptTrack, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trackId !== "") {
      writer.uint32(10).string(message.trackId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentRequest_InterruptTrack {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentRequest_InterruptTrack();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentRequest_InterruptTrack {
    return { trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "" };
  },

  toJSON(message: AgentRequest_InterruptTrack): unknown {
    const obj: any = {};
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AgentRequest_InterruptTrack>, I>>(base?: I): AgentRequest_InterruptTrack {
    return AgentRequest_InterruptTrack.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AgentRequest_InterruptTrack>, I>>(object: I): AgentRequest_InterruptTrack {
    const message = createBaseAgentRequest_InterruptTrack();
    message.trackId = object.trackId ?? "";
    return message;
  },
};

function createBaseAgentResponse(): AgentResponse {
  return { authenticated: undefined, trackData: undefined };
}

export const AgentResponse: MessageFns<AgentResponse> = {
  encode(message: AgentResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authenticated !== undefined) {
      AgentResponse_Authenticated.encode(message.authenticated, writer.uint32(10).fork()).join();
    }
    if (message.trackData !== undefined) {
      AgentResponse_TrackData.encode(message.trackData, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authenticated = AgentResponse_Authenticated.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackData = AgentResponse_TrackData.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentResponse {
    return {
      authenticated: isSet(object.authenticated)
        ? AgentResponse_Authenticated.fromJSON(object.authenticated)
        : undefined,
      trackData: isSet(object.trackData) ? AgentResponse_TrackData.fromJSON(object.trackData) : undefined,
    };
  },

  toJSON(message: AgentResponse): unknown {
    const obj: any = {};
    if (message.authenticated !== undefined) {
      obj.authenticated = AgentResponse_Authenticated.toJSON(message.authenticated);
    }
    if (message.trackData !== undefined) {
      obj.trackData = AgentResponse_TrackData.toJSON(message.trackData);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AgentResponse>, I>>(base?: I): AgentResponse {
    return AgentResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AgentResponse>, I>>(object: I): AgentResponse {
    const message = createBaseAgentResponse();
    message.authenticated = (object.authenticated !== undefined && object.authenticated !== null)
      ? AgentResponse_Authenticated.fromPartial(object.authenticated)
      : undefined;
    message.trackData = (object.trackData !== undefined && object.trackData !== null)
      ? AgentResponse_TrackData.fromPartial(object.trackData)
      : undefined;
    return message;
  },
};

function createBaseAgentResponse_Authenticated(): AgentResponse_Authenticated {
  return {};
}

export const AgentResponse_Authenticated: MessageFns<AgentResponse_Authenticated> = {
  encode(_: AgentResponse_Authenticated, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentResponse_Authenticated {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentResponse_Authenticated();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AgentResponse_Authenticated {
    return {};
  },

  toJSON(_: AgentResponse_Authenticated): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AgentResponse_Authenticated>, I>>(base?: I): AgentResponse_Authenticated {
    return AgentResponse_Authenticated.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AgentResponse_Authenticated>, I>>(_: I): AgentResponse_Authenticated {
    const message = createBaseAgentResponse_Authenticated();
    return message;
  },
};

function createBaseAgentResponse_TrackData(): AgentResponse_TrackData {
  return { peerId: "", track: undefined, data: new Uint8Array(0) };
}

export const AgentResponse_TrackData: MessageFns<AgentResponse_TrackData> = {
  encode(message: AgentResponse_TrackData, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.peerId !== "") {
      writer.uint32(10).string(message.peerId);
    }
    if (message.track !== undefined) {
      Track.encode(message.track, writer.uint32(18).fork()).join();
    }
    if (message.data.length !== 0) {
      writer.uint32(26).bytes(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AgentResponse_TrackData {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAgentResponse_TrackData();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.peerId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.track = Track.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AgentResponse_TrackData {
    return {
      peerId: isSet(object.peerId) ? globalThis.String(object.peerId) : "",
      track: isSet(object.track) ? Track.fromJSON(object.track) : undefined,
      data: isSet(object.data) ? bytesFromBase64(object.data) : new Uint8Array(0),
    };
  },

  toJSON(message: AgentResponse_TrackData): unknown {
    const obj: any = {};
    if (message.peerId !== "") {
      obj.peerId = message.peerId;
    }
    if (message.track !== undefined) {
      obj.track = Track.toJSON(message.track);
    }
    if (message.data.length !== 0) {
      obj.data = base64FromBytes(message.data);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AgentResponse_TrackData>, I>>(base?: I): AgentResponse_TrackData {
    return AgentResponse_TrackData.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AgentResponse_TrackData>, I>>(object: I): AgentResponse_TrackData {
    const message = createBaseAgentResponse_TrackData();
    message.peerId = object.peerId ?? "";
    message.track = (object.track !== undefined && object.track !== null) ? Track.fromPartial(object.track) : undefined;
    message.data = object.data ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
