// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.32.0
// source: fishjam/notifications/shared.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "fishjam.notifications";

/** Defines types of tracks being published by peers and component */
export enum TrackType {
  TRACK_TYPE_UNSPECIFIED = 0,
  TRACK_TYPE_VIDEO = 1,
  TRACK_TYPE_AUDIO = 2,
  UNRECOGNIZED = -1,
}

export function trackTypeFromJSON(object: any): TrackType {
  switch (object) {
    case 0:
    case "TRACK_TYPE_UNSPECIFIED":
      return TrackType.TRACK_TYPE_UNSPECIFIED;
    case 1:
    case "TRACK_TYPE_VIDEO":
      return TrackType.TRACK_TYPE_VIDEO;
    case 2:
    case "TRACK_TYPE_AUDIO":
      return TrackType.TRACK_TYPE_AUDIO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrackType.UNRECOGNIZED;
  }
}

export function trackTypeToJSON(object: TrackType): string {
  switch (object) {
    case TrackType.TRACK_TYPE_UNSPECIFIED:
      return "TRACK_TYPE_UNSPECIFIED";
    case TrackType.TRACK_TYPE_VIDEO:
      return "TRACK_TYPE_VIDEO";
    case TrackType.TRACK_TYPE_AUDIO:
      return "TRACK_TYPE_AUDIO";
    case TrackType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TrackEncoding {
  TRACK_ENCODING_UNSPECIFIED = 0,
  TRACK_ENCODING_PCM16 = 1,
  TRACK_ENCODING_OPUS = 2,
  UNRECOGNIZED = -1,
}

export function trackEncodingFromJSON(object: any): TrackEncoding {
  switch (object) {
    case 0:
    case "TRACK_ENCODING_UNSPECIFIED":
      return TrackEncoding.TRACK_ENCODING_UNSPECIFIED;
    case 1:
    case "TRACK_ENCODING_PCM16":
      return TrackEncoding.TRACK_ENCODING_PCM16;
    case 2:
    case "TRACK_ENCODING_OPUS":
      return TrackEncoding.TRACK_ENCODING_OPUS;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrackEncoding.UNRECOGNIZED;
  }
}

export function trackEncodingToJSON(object: TrackEncoding): string {
  switch (object) {
    case TrackEncoding.TRACK_ENCODING_UNSPECIFIED:
      return "TRACK_ENCODING_UNSPECIFIED";
    case TrackEncoding.TRACK_ENCODING_PCM16:
      return "TRACK_ENCODING_PCM16";
    case TrackEncoding.TRACK_ENCODING_OPUS:
      return "TRACK_ENCODING_OPUS";
    case TrackEncoding.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Describes a media track */
export interface Track {
  id: string;
  type: TrackType;
  metadata: string;
}

function createBaseTrack(): Track {
  return { id: "", type: 0, metadata: "" };
}

export const Track: MessageFns<Track> = {
  encode(message: Track, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.metadata !== "") {
      writer.uint32(26).string(message.metadata);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Track {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrack();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Track {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      type: isSet(object.type) ? trackTypeFromJSON(object.type) : 0,
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
    };
  },

  toJSON(message: Track): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.type !== 0) {
      obj.type = trackTypeToJSON(message.type);
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Track>, I>>(base?: I): Track {
    return Track.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Track>, I>>(object: I): Track {
    const message = createBaseTrack();
    message.id = object.id ?? "";
    message.type = object.type ?? 0;
    message.metadata = object.metadata ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
